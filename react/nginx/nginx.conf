user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {

    include /etc/nginx/mime.types;
    
    upstream backend {
        server backend:8080; # backend : 도커컴포즈 서비스명
    }
    upstream fastapi {
        server fastapi:8000;
    }

    server {
        listen 80;
        server_name hanamedisave.site www.hanamedisave.site;  # 사용할 도메인

        location / {
            return 301 https://$host$request_uri;  # HTTP 요청을 HTTPS로 리디렉션
        }
    }

    # HTTPS 설정
    server {
        listen 443 ssl;
        server_name hanamedisave.site www.hanamedisave.site;  # 사용할 도메인

        ssl_certificate /etc/letsencrypt/live/www.hanamedisave.site/fullchain.pem;  # 인증서 경로
        ssl_certificate_key /etc/letsencrypt/live/www.hanamedisave.site/privkey.pem;  # 키 경로
        # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

        # 기본 루트 경로와 인덱스 파일을 설정
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # '/api/'로 시작하는 모든 요청에 대해 백엔드 서버로 프록시하도록 설정
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            #  # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' 'https://www.hanamedisave.site'; 
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

            # # OPTIONS 요청에 대한 처리
            # if ($request_method = 'OPTIONS') {
            #     add_header 'Access-Control-Allow-Origin' '*' always;
            #     add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
            #     add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            #     return 204;
            # }
        }
        location /openvidu/ {
            proxy_pass http://backend/openvidu/;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            #  # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' 'https://www.hanamedisave.site'; 
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

        }
        location /api/ws {
            proxy_pass http://backend/ws;  # '/api/ws'를 백엔드의 '/ws'로 프록시
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # WebSocket 연결 시간 제한 설정 (필요에 따라 조정)
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }

        location /api/fast/ {
            proxy_pass http://fastapi;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # CORS 헤더 추가
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;

            # OPTIONS 요청에 대한 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
                return 204;
            }
        }
    }
}
